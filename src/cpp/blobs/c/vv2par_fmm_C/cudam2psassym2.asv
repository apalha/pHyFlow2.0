__shared__ dcmplx rpow[M2PSMAXTHREADS];
#ifdef LOGM2PS
__shared__ dcmplx Thisthat0[M2PSMAXTHREADS/2];
#endif
double re,im,pre,pim;
int shifttmp;
int j,k;
__shared__ int currentlevel,offset,m,mend,loopend,boxshift,loopcount,oldboxnr,boxnr;
__shared__ int *jcptr,*kcptr,*ir;
__shared__ double* result;
__shared__ dcmplx zlocal[2];
if(threadIdx.x==0){
  result=wksp+(pshift+1)*M2PSMAXTHREADS;
  currentlevel=startlevel;
  offset=0;
  for(j=0;j<currentlevel;j++)
    offset+=(1<<(j<<1));
  boxnr=blockIdx.x;
  while(boxnr>=(1<<(currentlevel<<1))) {
    boxnr-=(1<<(currentlevel<<1));
    offset+=(1<<(currentlevel<<1));
    currentlevel++;
  }
  oldboxnr=boxnr+offset;
  if(currentlevel<=nlevel) {
    jcptr=jcptr2[currentlevel];
    kcptr=kcptr2[currentlevel];
    ir=ir2[currentlevel];
  }
  m=1;
  mend=0;
}
for(k=threadIdx.x;k<=pshift*2+1;k+=blockDim.x)
  result[k]=0;
__syncthreads();
//choose working box
for(;;) {
//   if(threadIdx.x==0){
//     while(boxnr>=(1<<(currentlevel<<1))) {
//       boxnr-=(1<<(currentlevel<<1));
//       offset+=(1<<(currentlevel<<1));
//       currentlevel++;
//       jcptr=jcptr2[currentlevel];
//       kcptr=kcptr2[currentlevel];
//       ir=ir2[currentlevel];
//     }
//   }
//   __syncthreads();
  if(currentlevel>nlevel)
    break;
  if(m>=mend) {
    if(threadIdx.x==0) {
      m=kcptr[boxnr];
      mend=jcptr[boxnr+1];
      loopend=imin(mend, m+blockDim.x/2);
      boxshift=loopend;
      loopcount=loopend-m;
      boxshift=loopcount;
    }
    if(threadIdx.x<2)
      ((double*)&zlocal[0])[threadIdx.x]=((double*)&z0[oldboxnr])[threadIdx.x];
    __syncthreads();
    if(threadIdx.x<sizeof(dcmplx)/sizeof(float)) {
      ((float*)&zlocal)[threadIdx.x] =tex1Dfetch(tz0,(boxnr+offset)*sizeof(dcmplx)/sizeof(float)+threadIdx.x);
    }
  }
  
  
  if((threadIdx.x>>1)<loopcount) {
    k=ir[m+(threadIdx.x/2)]+offset;
//       ((float*)wksp)[threadIdx.x*2] = tex1Dfetch(tz0,(k+offset)*sizeof(dcmplx)/sizeof(float)+(threadIdx.x&1)*2);
//       ((float*)wksp)[threadIdx.x*2+1] = tex1Dfetch(tz0,(k+offset)*sizeof(dcmplx)/sizeof(float)+(threadIdx.x&1)*2+1);
    wksp[threadIdx.x]=((double*)&z0[k])[threadIdx.x&1];
#ifdef LOGM2PS
    ((double*)Thisthat0)[threadIdx.x]=((double*)&coeff1[k*(pshift+1)])[threadIdx.x&1];
#endif
  }
  __syncthreads();
  if(mend-m<(blockDim.x>>1)) {
    if(threadIdx.x==0) {
//       oldboxnr=boxnr+offset;
      boxnr+=gridDim.x;
      while(boxnr>=(1<<(currentlevel<<1))) {
        boxnr-=(1<<(currentlevel<<1));
        offset+=(1<<(currentlevel<<1));
        currentlevel++;
      }
      if(currentlevel<=nlevel) {
        jcptr=jcptr2[currentlevel];
        kcptr=kcptr2[currentlevel];
        ir=ir2[currentlevel];
        m=kcptr[boxnr];
        mend=jcptr[boxnr+1];
        loopend=imin(mend, m+blockDim.x/2-boxshift);
        loopcount+=loopend-m;
      }
    }
    __syncthreads();
    if(currentlevel<=nlevel) {
      if(threadIdx.x<2)
        ((double*)&zlocal[1])[threadIdx.x]=((double*)&z0[(boxnr+offset)])[threadIdx.x];
      if((threadIdx.x>>1)>=boxshift&&(threadIdx.x>>1)<loopcount) {
        k=ir[m+(threadIdx.x/2)-boxshift]+offset;
//         ((float*)wksp)[threadIdx.x*2] = tex1Dfetch(tz0,(k+offset)*sizeof(dcmplx)/sizeof(float)+(threadIdx.x&1)*2);
//         ((float*)wksp)[threadIdx.x*2+1] = tex1Dfetch(tz0,(k+offset)*sizeof(dcmplx)/sizeof(float)+(threadIdx.x&1)*2+1);
        wksp[threadIdx.x]=((double*)&z0[k])[threadIdx.x&1];
#ifdef LOGM2PS
        ((double*)Thisthat0)[threadIdx.x]=((double*)&coeff1[k*(pshift+1)])[threadIdx.x&1];
#endif
      }
    }
  }
  if(threadIdx.x<loopcount) {
    pre=creal(zlocal[threadIdx.x>=boxshift])-wksp[threadIdx.x*2];
    pim=cimag(zlocal[threadIdx.x>=boxshift])-wksp[threadIdx.x*2+1];
    //correct division
    if(fabs(pre)>fabs(pim)) {
      im=pim/pre;
      re=pre+im*pim;
      COMPLEXASSIGN(rpow[threadIdx.x*2], 1/re, -im*(1/re));
    }
    else {
      im=pre/pim;
      re=pim+im*pre;
      COMPLEXASSIGN(rpow[threadIdx.x*2], im*(1/re), -1/re);
    }
    //calculate sqr
    COMPLEXASSIGN(rpow[threadIdx.x*2+1], creal(rpow[threadIdx.x*2])*creal(rpow[threadIdx.x*2])-cimag(rpow[threadIdx.x*2])*cimag(rpow[threadIdx.x*2]), 2*creal(rpow[threadIdx.x*2])*cimag(rpow[threadIdx.x*2]));
  }
  wksp[threadIdx.x]=0;
  __syncthreads();
  if((threadIdx.x>>1)<loopcount&&(threadIdx.x&1)<=pshift-1) {
    re=creal(rpow[threadIdx.x]); //scaling value
    im=cimag(rpow[threadIdx.x]);
    pre=creal(coeff1[k*(pshift+1)+(threadIdx.x&1)+1]); //load coefficients
    pim=cimag(coeff1[k*(pshift+1)+(threadIdx.x&1)+1]);
    shifttmp=M2PSMAXTHREADS*((threadIdx.x&1)+1)+(threadIdx.x&(~1));
    wksp[shifttmp]=pre*re-pim*im; //scale the coeffient
    wksp[shifttmp+1] = pre*im+pim*re;
  }
  __syncthreads();
  for(j=3;j<=pshift;j+=2) {
    if((threadIdx.x>>1)<loopcount) {
      shifttmp=M2PSMAXTHREADS*(j+(threadIdx.x&1))+(threadIdx.x&(~1));
      if((j+(threadIdx.x&1))<=pshift) {
        pre=re*creal(rpow[(threadIdx.x|1)])-im*cimag(rpow[(threadIdx.x|1)]); //calculate next power of r
        im=re*cimag(rpow[(threadIdx.x|1)])+im*creal(rpow[(threadIdx.x|1)]);
        re=pre;
        pre=creal(coeff1[k*(pshift+1)+(j+(threadIdx.x&1))]); //load coefficients
        pim=cimag(coeff1[k*(pshift+1)+(j+(threadIdx.x&1))]);
        wksp[shifttmp] = pre*re-pim*im; //scale the coeffient
        wksp[shifttmp+1] = pre*im+pim*re;
      }
    }
    __syncthreads();
  }
  
  
  
  //perform horner scheme interaction
//       // (1) "upward" phase
  if((threadIdx.x>>1)<loopcount) {
    for (k = 1; k <= pshift-3; k+=4) {
//       for (j = pshift-k; j < pshift; j++) {
//         wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
//       }
        //manual loop unrolling increases speed with 5-10 %
      for (j = pshift-k; j < pshift-7; j+=8) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+8)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //next x3
      }
      if (j < pshift-3) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        j+=4;
      }
      if (j < pshift-1) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        j+=2;
      }
      if (j < pshift) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        j++;
      }
      wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
      wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
      wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
      wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x2
      wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
      wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x3
    }
    if (k <= pshift-1) {
//       for (j = pshift-k; j < pshift; j++) {
//         wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
//       }
        //manual loop unrolling increases speed with 5-10 %
      for (j = pshift-k; j < pshift-7; j+=8) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+8)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x]; //next
      }
      if (j < pshift-3) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next
        j+=4;
      }
      if (j < pshift-1) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        j+=2;
      }
      if (j < pshift) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current shift
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        j++;
      }
      wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
      k+=2;
    }
    if (k <= pshift) {
//       for (j = pshift-k; j < pshift; j++) {
//         wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
//       }
        //manual loop unrolling increases speed with 5-10 %
      for (j = pshift-k; j < pshift-7; j+=8) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+8)*M2PSMAXTHREADS+threadIdx.x];
      }
      if (j < pshift-3) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x];
        j+=4;
      }
      if (j < pshift-1) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x];
        j+=2;
      }
      if (j < pshift) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
      }
    }
    // (2) "downward" phase
    for (k = pshift; k > 4; k-=4) {
//       for (j = k; j <= pshift; j++) {
//         wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x];
//       }
      for (j = k; j <= pshift-7; j+=8) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-4)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next  x2
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next x3
      }
      if (j <= pshift-3) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-4)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next  x2
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        j+=4;
      }
      if (j <= pshift-1) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-4)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        j+=2;
      }
      if (j <= pshift) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x2
        wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-4)*M2PSMAXTHREADS+threadIdx.x]; //next x3
        j++;
      }
      j--;
      wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next step
      wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x2
      wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-3)*M2PSMAXTHREADS+threadIdx.x]; //next x3
      wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x2
      wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next x3
      wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next x3
    }
    if (k > 2) {
//       for (j = k; j <= pshift; j++) {
//         wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x];
//       }
      for (j = k; j <= pshift-7; j+=8) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x]; //next
      }
      if (j <= pshift-3) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x]; //next
        j+=4;
      }
      if (j <= pshift-1) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next
        j+=2;
      }
      if (j <= pshift) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //current step
        wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-2)*M2PSMAXTHREADS+threadIdx.x]; //next
        j++;
      }
      j--;
      wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x]; //next step
      k-=2;
    }
    if(k > 1) {
//       for (j = k; j <= pshift; j++) {
//         wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x];
//       }
      for (j = k; j <= pshift-7; j+=8) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+4)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+5)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+7)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+6)*M2PSMAXTHREADS+threadIdx.x];
      }
      if (j <= pshift-3) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+3)*M2PSMAXTHREADS+threadIdx.x] += wksp[(j+2)*M2PSMAXTHREADS+threadIdx.x];
        j+=4;
      }
      if (j <= pshift-1) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x];
        wksp[(j+1)*M2PSMAXTHREADS+threadIdx.x] += wksp[j*M2PSMAXTHREADS+threadIdx.x];
        j+=2;
      }
      if (j <= pshift) {
        wksp[j*M2PSMAXTHREADS+threadIdx.x] += wksp[(j-1)*M2PSMAXTHREADS+threadIdx.x];
      }
    }
  }
  __syncthreads();
  //perform post-scaling
  if((threadIdx.x>>1)<loopcount) {
    //the first part already has r values calculated, take these as a separate step
    shifttmp=M2PSMAXTHREADS*(threadIdx.x&1)+(threadIdx.x&(~1));
#ifdef LOGM2PS
    if((threadIdx.x&1)==0) { //coefficient 0 has additional terms for logarithmic interaction
      re=0.5*log(creal(rpow[(threadIdx.x&(~1))])*creal(rpow[(threadIdx.x&(~1))])+cimag(rpow[(threadIdx.x&(~1))])*cimag(rpow[(threadIdx.x&(~1))]));
      im=atan2(creal(rpow[(threadIdx.x&(~1))]), cimag(rpow[(threadIdx.x&(~1))]));
      wksp[shifttmp]-=re*creal(Thisthat0[(threadIdx.x>>1)])+cimag(Thisthat0[(threadIdx.x>>1)])*im;
      wksp[shifttmp+1]+=creal(Thisthat0[(threadIdx.x>>2)*2])*im+cimag(Thisthat0[(threadIdx.x>>2)*2])*re;
      re=-1;
      im=0;
    }
    else if((threadIdx.x&1)<=pshift){ //scale the other three elements
      re=creal(rpow[threadIdx.x-1]); //set scaling term starting value
      im=cimag(rpow[threadIdx.x-1]);
      wksp[shifttmp]-=creal(Thisthat0[(threadIdx.x>>1)]); //apply the additional term from the logarithm
      wksp[shifttmp+1]-=cimag(Thisthat0[(threadIdx.x>>1)]);
      //perform the scaling
      pre=-(wksp[shifttmp]*re-wksp[shifttmp+1]*im)/**(1-(signed int)((threadIdx.x&1)<<1))*/;
      wksp[shifttmp+1]=-(wksp[shifttmp]*im+wksp[shifttmp+1]*re)/**(1-(signed int)((threadIdx.x&1)<<1))*/;
      wksp[shifttmp]=pre;
    }
#else
    if((threadIdx.x&1)==0) { //in this phase, the r vector should start from 0, while the saved one starts from 1, add the first unity element
      re=-1; //set scaling term starting value
      im=0;
    }
    else {
      re=creal(rpow[threadIdx.x-1]); //set scaling term starting value
      im=cimag(rpow[threadIdx.x-1]);
    }
    if((threadIdx.x&1)<=pshift){ //perform the scaling
      pre=-(wksp[shifttmp]*re-wksp[shifttmp+1]*im)/**(1-(signed int)((threadIdx.x&1)<<1))*/;
      wksp[shifttmp+1]=-(wksp[shifttmp]*im+wksp[shifttmp+1]*re)/**(1-(signed int)((threadIdx.x&1)<<1))*/;
      wksp[shifttmp]=pre;
    }
#endif
    for(j=(threadIdx.x&1)+2;j<=pshift;j+=2) { //scale the rest of the elements
      pre=re*creal(rpow[(threadIdx.x|1)])-im*cimag(rpow[(threadIdx.x|1)]); //calculate the next term in the scaling by multiplying with 1/r^4
      im=re*cimag(rpow[(threadIdx.x|1)])+im*creal(rpow[(threadIdx.x|1)]);
      re=pre;
      shifttmp=M2PSMAXTHREADS*j+(threadIdx.x&(~1));

#ifdef LOGM2PS
      wksp[shifttmp]-=creal(Thisthat0[(threadIdx.x>>1)])/j; //apply the additional term from the logarithm
      wksp[shifttmp+1]-=cimag(Thisthat0[(threadIdx.x>>1)])/j;
#endif
      //perform the scaling
      pre=-(wksp[shifttmp]*re-wksp[shifttmp+1]*im)/**(1-(signed int)((j&1)<<1))*/;
      wksp[shifttmp+1]=-(wksp[shifttmp]*im+wksp[shifttmp+1]*re)/**(1-(signed int)((j&1)<<1))*/;
      wksp[shifttmp]=pre;
    }
  }
  __syncthreads();
  /*note: the complicated scheme here is to avoid bank conflicts, let all summations start with an offset of 1*/
  for(k=threadIdx.x;k<=pshift*2+1;k+=blockDim.x) {
    for(j=0,shifttmp=threadIdx.x%boxshift;j<boxshift;j++,shifttmp++,shifttmp=shifttmp==boxshift?0:shifttmp){
      result[k]+=wksp[(k>>1)*M2PSMAXTHREADS+(shifttmp<<1)+(threadIdx.x&1)];
    }
  }
  __syncthreads();
  if(loopend==mend||boxshift<blockDim.x/2) {
    for(k=threadIdx.x;k<=pshift*2+1;k+=blockDim.x) {
      ((double*)&coeff2[oldboxnr*(pshift+1)])[k]+=result[k];
      result[k]=0;
    }
    __syncthreads();
  }
  
  //two boxes involved in split
  if(loopcount!=boxshift) {
    for(k=threadIdx.x;k<=pshift*2+1;k+=blockDim.x) {
      for(j=boxshift;j<loopcount;j++){
        result[k]+=wksp[(k>>1)*M2PSMAXTHREADS+(j<<1)+(threadIdx.x&1)];
      }
    }
    __syncthreads();
    if(loopend==mend) { //second box finished as well
      for(k=threadIdx.x;k<=pshift*2+1;k+=blockDim.x) {
        ((double*)&coeff2[(boxnr+offset)*(pshift+1)])[k]+=result[k];
        result[k]=0;
      }
    }
    else {
      if(threadIdx.x==0) {
        oldboxnr=boxnr+offset;
        COMPLEXASSIGN(zlocal[0],creal(zlocal[1]),cimag(zlocal[1]));
      }
    }
    __syncthreads();
  }
  
  if(threadIdx.x==0) {
    m=loopend;
    loopend=imin(mend, m+blockDim.x/2);
    loopcount=loopend-m;
    boxshift=loopcount;
  }
  __syncthreads();
  if(m>=mend){
//     for(k=threadIdx.x;k<=pshift*2+1;k+=blockDim.x)
//       ((double*)&coeff2[(boxnr+offset)*(pshift+1)])[k]+=result[k];
//     __syncthreads();
    if(threadIdx.x==0) {
      boxnr+=gridDim.x;
      while(boxnr>=(1<<(currentlevel<<1))) {
        boxnr-=(1<<(currentlevel<<1));
        offset+=(1<<(currentlevel<<1));
        currentlevel++;
      }
      oldboxnr=boxnr+offset;
      if(currentlevel<=nlevel) {
        jcptr=jcptr2[currentlevel];
        kcptr=kcptr2[currentlevel];
        ir=ir2[currentlevel];
      }
    }
    __syncthreads();
  }
}
